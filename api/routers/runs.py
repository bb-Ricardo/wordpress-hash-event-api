# -*- coding: utf-8 -*-
#  Copyright (c) 2022 Ricardo Bartels. All rights reserved.
#
#  wordpress-hash-event-api
#
#  This work is licensed under the terms of the MIT license.
#  For a copy, see file LICENSE.txt included in this
#  repository or visit: <https://opensource.org/licenses/MIT>.

from typing import List

from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import Response
from datetime import datetime, timedelta
from icalendar import Calendar, Event, vText, Alarm
from pytz import utc
from bs4 import BeautifulSoup
import re

from api.security import api_key_valid
from api.models.run import Hash, HashParams
from api.models.exceptions import APITokenValidationFailed
from api.factory.runs import get_hash_runs
from config.api import BasicAPISettings
from common.misc import format_slug
import config

router_runs = APIRouter(
    prefix="/runs",
    tags=["runs"]
)


@router_runs.get("/all", response_model=List[Hash], summary="List of runs", description="Returns all Hash runs")
async def get_runs(params: HashParams = Depends(HashParams), key_valid: bool = Depends(api_key_valid)):

    if key_valid is False:
        raise APITokenValidationFailed

    result = get_hash_runs(params)

    """
    if error is not None:
        raise HTTPException(status_code=400, detail=error)
    """

    return result


@router_runs.get("/calendar", summary="List of runs as iCal events", description="Returns Hash runs as iCal events",
                 # Set what the media type will be in the autogenerated OpenAPI specification.
                 # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
                 responses={
                    200: {
                        "content": {"text/calendar": {}},
                    }
                 },
                 # Prevent FastAPI from adding "application/json" as an additional
                 # response media type in the autogenerated OpenAPI specification.
                 # https://github.com/tiangolo/fastapi/issues/3258
                 response_class=Response
                 )
async def get_runs_as_icalendar(params: HashParams = Depends(HashParams), key_valid: bool = Depends(api_key_valid)):

    if key_valid is False:
        raise APITokenValidationFailed

    main_config = BasicAPISettings()

    if params.start_date__gt is None:
        params.start_date__gt = datetime.now(tz=utc) - timedelta(weeks=config.calendar_settings.num_past_weeks_exposed)

    params.last_update__gt = datetime.now() - timedelta(weeks=config.calendar_settings.num_past_weeks_exposed)

    # init the calendar
    cal = Calendar()

    # Some properties are required to be compliant
    cal.add('prodid', f'-//wordpress-hash-event-api/{main_config.version}//')
    cal.add('version', '2.0')
    cal.add('X-WR-CALNAME', config.calendar_settings.name)
    cal.add('X-WR-TIMEZONE', config.app_settings.timezone_string)
    cal.add('CALSCALE', 'GREGORIAN')
    cal.add('METHOD', 'PUBLISH')

    for run in get_hash_runs(params) or list():

        # hide runs which are deleted or meant to not show up
        if run.deleted or run.event_hidden:
            continue

        if run.end_date is None:
            run.end_date = run.start_date + timedelta(hours=2)

        event_description = ""
        # parse html data back to strings
        if run.event_description is not None:
            event_description = BeautifulSoup(run.event_description.replace("<br>", "\n"),
                                              features="html.parser").get_text()

        # reduce too many new lines
        event_description = re.sub(r'\n(\n)+', '\n\n', event_description).strip()

        # add has cash and location line
        event_description += f'\n\nHash Cash: {run.hash_cash_members}{run.event_currency}\n'
        event_description += f'Location URL: {run.geo_map_url}'

        event = Event()
        event.add('uid', f"wordpress-hash-event-api-event/{run.id}")
        event.add('name', run.event_name)
        event.add('summary', run.event_name)
        event.add('description', event_description)
        event.add('dtstart', run.start_date)
        event.add('dtend', run.end_date)
        event.add('last-modified', run.last_update)
        event.add('location', vText(run.geo_location_name))
        event.add('url', run.event_url, {"VALUE": "URI"})

        if run.geo_lat and run.geo_long:
            event.add('X-APPLE-STRUCTURED-LOCATION', f'geo:{run.geo_lat},{run.geo_long}',
                      {"X-TITLE": vText(run.geo_location_name)})

        if config.calendar_settings.enable_event_alarm:
            alarm = Alarm()
            alarm.add("trigger", timedelta(hours=-1))
            alarm.add("uid", f"wordpress-hash-event-api-event-alarm/{run.id}")
            alarm.add("description", run.event_name)
            alarm.add("action", "AUDIO")
            alarm.add("ATTACH", "Chord", {"VALUE": "URI"})

            event.add_component(alarm)

        cal.add_component(event)

    return Response(content=cal.to_ical(),
                    media_type="text/calendar",
                    headers={"content-disposition":
                             f"attachment; filename={format_slug(config.calendar_settings.name)}.ics"})


# noinspection PyShadowingBuiltins
@router_runs.get("/{id}", response_model=Hash, summary="Returns a single Hash run")
async def get_run(id: int, key_valid: bool = Depends(api_key_valid)):
    """
        To view all details related to a single run

        - **id**: The integer id of the desired run
    """

    if key_valid is False:
        raise APITokenValidationFailed

    # noinspection PyArgumentList
    result = get_hash_runs(HashParams(id=id))

    """
    if error is not None:
        raise HTTPException(status_code=400, detail=error)
    """
    if result is None or len(result) == 0:
        raise HTTPException(status_code=404, detail="Run not found")

    return result[0]

# EOF
